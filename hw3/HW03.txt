CSCI 344 - Programming Language Concepts
Assignment 03 (40 points)
Due Friday, February 8, 2019

GENERAL NOTE

All the questions here have you add "semantics" to a language's grammar.
The general mode of operation will be that all node classes will have
one (maybe more?) method added, and that the root node's toString()
method will call that method in its own class, which will in turn call
methods in the node's children. Do not do everything in toString().

1.  (10 pts)
    Consider the language for the nonempty-list-of-numbers, which is in the
    file numlistv6.plcc (copied here).

    Modify the code (and the comments) so that you have created a new
    system that computes the (floating point) average of all of the
    numbers in the list.

    Call your modified system 'hw03-avg.plcc' and submit this copy according
    to the submission requirements at the end of this document. Do not
    make any changes to this file for this question.

    Grading:
    10 pts: 5 for the grammar, 5 for the implementation of semantic code.

    You should test your implementation by running the Rep program
    with example input.  A sample interaction looks like this:

    --> (    3 )
    3.0
    --> (3 5    2 4)
    3.5
    --> ()
    ERROR (your actual error message will be different from this)

2.  (15 pts)
    Write a plcc lexical specification, grammar, and semantics for
    signed 2's complement binary numbers.  When you run the resulting Rep
    file, you should be able to enter unsigned binary numbers from the
    keyboard, with output that is the decimal equivalent of the number.
    For example:

    --> 0
    0
    --> 101
    -3
    --> 000000011
    3
    --> 10000
    -16
    --> 011111
    31
    --> 012
    (ERROR)

    You may not read the binary number in as a single token and do the
    conversion totally in the back end. Your lexical specification
    should have exactly three tokens: NL (a newline) defined as '\n',
    and binary digits ZERO and ONE.

    To add semantics to your grammar file, your Start class should
    define a toString method that returns the String representation of
    the decimal value of the binary number, as determined by calling
    some other method on the collection of bit nodes, however you
    define them.

    Here's how to think about it, step-by-step, for the binary number
    1011011:

        Remember value of leftmost bit. If it is 1, complement all the
        bits in the nodes below as you read them.

        running sum     =         0 (initial value)
                                 /
        (Start at right.)  _____/
                          /
	1       base 10 = 0*2+0 = 0
        ^                     ^  /
                           _____/
                          /
        10      base 10 = 0*2+1 = 1
         ^                    ^  /
                           _____/
                          /
        101     base 10 = 1*2+0 = 2
          ^                   ^  /
                           _____/
                          /
        1011    base 10 = 2*2+0 = 4
           ^                  ^  /
                           _____/
                          /
        10110   base 10 =4*2+1 = 9
            ^                 ^  /
                           _____/
                          /
        101101  base 10 =9*2+0 = 18
             ^                ^  /
                           _____/
                          /
        1011011 base 10 =18*2+0 = 36
              ^               ^

        Since the first bit was originally 1, add 1 to the answer,
        then negate:

                                   -37

    Again, you may *not* use any other method to convert from binary
    to decimal.

    If the bitList is empty (check its size), print 0.

    Name your grammar file 'hw03-binary.plcc' and submit this copy
    according to the submission requirements at the end of this
    document. Do not make any changes to the contents of this file
    for this question.

    Grading:
    15 pts: 5 for the grammar, 10 for the implementation of semantic code.

3.  (15 pts)

    Using your solution to the SmallTalk expression parser augmented
    to accept identifiers wherever numbers were accepted, or using
    the one posted on the web in Handouts under C-Parsing, add
    semantic code to transform the syntax, similarly to what you
    did last week. Here are examples of the format transformation.

    Smalltalk                      | Your output
                                   |
    2                              | 2
    x                              | x
    x y                            | x.y()
    x y: z                         | x.y:(z)
    x y: z u: 99                   | x.y:u:(z,99)
    (a b) y: z u: 99               | a.b().y:u:(z,99)
    (a b: 3 c: d) y: z u: (v w: x) | a.b:c:(3,d).y:u:(z,v.w:(x))

    Basically, we attempt to make a more conventional OO method call
    syntax by concatentaing the symbols in a message and then rounding
    up their argument values into a parenthesized list.

    Note the lack of spaces in the output. This is done to expediate
    grading.

    For this question only, your added Java code should NOT be in
    the grammar file. Create an ijava file for each class or class
    extension, and include them all in the plcc file.

    Put your solution in a DIRECTORY called 'HW03-ST'. Within
    that directory call your grammar file hw03-st.plcc. Put all of your
    ijava files in that directory as well.

    Grading:
    15 pts: 5 for the grammar, 10 for the implementation of semantic code.

Submission requirements
-----------------------

Create a zip file named hw03.zip containing the following files.

    hw03-avg.plcc
    hw03-binary.plcc
    HW03-ST/hw03-st.plcc
    HW03-ST/*.ijava

Submit your hw03.zip file to your HW03 Assignment Dropbox in MyCourses.

