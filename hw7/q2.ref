define node = proc(x,y,z) proc(t) if t then {if sub1(t) then z else y} else x
define empty = 0
define empty? = proc(t) if t then 0 else 1
define value = proc(t) .t(0)
define left = proc(t) .t(1)
define right = proc(t) .t(2)
define nodecount = proc(t) if t then add1(+(.nodecount(.left(t)),.nodecount(.right(t)))) else 0

define leq = proc(a,b) if zero?(-(a,b)) then 1 else .leq2(add1(a), b, a, add1(b))
define leq2 = proc(ua, b, a, ub) if zero?(-(ua,b)) then 1 else if zero?(-(a,ub)) then 0 else .leq2(add1(ua), b, a, add1(ub))

define put = proc(t,v) set t = .node(v, empty, empty)
define bstinsert = proc(t,v) if t then {if .leq(v, .value(t)) then .node(.value(t),.bstinsert(.left(t),v), .right(t)) else .node(.value(t), .left(t), .bstinsert(.right(t),v))} else set t = .node(v, empty, empty)

define rootq2 = empty
define rootq2 = .bstinsert( rootq2, 6 )
define rootq2 = .bstinsert( rootq2, 8 )
define rootq2 = .bstinsert( rootq2, 2 )
define rootq2 = .bstinsert( rootq2, 3 )
define rootq2 = .bstinsert( rootq2, 5 )
define rootq2 = .bstinsert( rootq2, 9 )
define rootq2 = .bstinsert( rootq2, 1 )

.nodecount( rootq2 ) % => 7
.value( rootq2 ) % => 6
.value( .left( rootq2 ) ) % => 2
.value( .left( .left( rootq2 ) ) ) % => 1
.value( .right( .left( rootq2 ) ) ) % => 3
.value( .right( .right( .left( rootq2 ) ) ) ) % => 5
.value( .right( rootq2 ) ) % => 8
.value( .right( .right( rootq2 ) ) ) % => 9
