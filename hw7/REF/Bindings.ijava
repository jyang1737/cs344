
Bindings
%%%%

import java.util.Collections;
import java.util.stream.Collectors;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;

/**
 * A set of bindings associated with a single scope.
 * A sequence of bindings forms an environment for the program at any
 * given point in time.
 */
public class Bindings {

    private List<Binding> bindingList;

    /**
     * Create an empty set of bindings.
     */
    public Bindings() {
        bindingList = new ArrayList<Binding>();
    }

    /**
     * Create set of bindings from the parallel arrays constructed by the
     * code typically generated by PLCC.
     */
    public Bindings (List< String > idList, List<Ref> refList) {
        // the Lists must be the same size
        if (idList.size() != refList.size())
            throw new RuntimeException("Bindings: List size mismatch");
        bindingList = new ArrayList<Binding>();
        Iterator< String > is = idList.iterator();
        Iterator< Ref > rs = refList.iterator();
        while (is.hasNext()) {
            bindingList.add(new Binding( is.next(), rs.next()));
        }
    }

    /**
     * Wrap an existing list of Binding objects in a new Bindings object.
     */
    public Bindings(List< Binding > bindingList) {
        this.bindingList = bindingList;
    }

    /**
     * Add a new Binding object to the end of this local environment.
     */
    public void add(Binding b) {
        bindingList.add(b);
    }

    /**
     * Add a binding (id, val) to the end of this local environment.
     */
    public void add( String id, Val val ) {
        add(new Binding(id, new ValRef(val)));
    }

    /**
     * Add a new Binding object to the front of this local environment.
     */
    public void addFirst(Binding b) {
	bindingList.add(0,b);
    }

    /**
     * Add a binding (id, val) to the front of this local environment.
     */
    public void addFirst(String s, Val v) {
	addFirst(new Binding(s, new ValRef(v)));
    }

    /**
     * Return a representation of this Bindings set as a list of
     * the Binding objects herein.
     */
    @Override
    public String toString() {
        String result = "";
        for ( Binding b: bindingList ) {
            result += b;
        }
        return result;
    }

    /**
     * Fetch the Binding objects in this Bindings object as a simple
     * iterable object, to prevent modification of the binding set.
     */
    public Iterable< Binding > bindings() {
        return Collections.unmodifiableList( bindingList );
    }
}

%%%%
