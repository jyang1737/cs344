
LetDecls
%%%
    @Override
    public String toString() {
        String result = "(";
        String sep = "(";
        for ( int i = 0; i < expList.size(); ++i ) {
            result += sep + varList.get( i ) + "," + expList.get( i ) + ")";
            sep = ",(";
        }
        result += ")";
        return result;
    }

    public Env addBindings( Env env ) {
        List< String > identList = new LinkedList<>();
        List< Val > valueList = new LinkedList<>();
        for ( int i = 0; i < expList.size(); ++i ) {
            identList.add( varList.get( i ).toString() );
            valueList.add( expList.get( i ).eval( env ) );
        }
        Bindings bindings = new Bindings( identList, valueList );
        return env.extendEnv( bindings );
    }

    public Env addSequentially(Env env) {
        Env nenv = env;
        List<String> vars = new ArrayList<>();
        for (int i = 0; i < expList.size(); ++i) {
            List<String> identList = new LinkedList<>();
            List<Val> valueList = new LinkedList<>();
            String variable = varList.get(i).toString();
            if (vars.contains(variable))
                throw new RuntimeException("Variable used twice.");
            identList.add(variable);
            valueList.add(expList.get(i).eval(nenv));
            vars.add(variable);
            Bindings bindings = new Bindings(identList, valueList);
            nenv = nenv.extendEnv(bindings);
        }
        return nenv;
    }
%%%

