CSCI 344 - Programming Language Concepts
Assignment 5 (55 points)
Due Monday, February 25, 2019

##QUESTION 1 (20 pts):

Define a modification for the 'let' expression, such that the following
code would work.

    let*
        a = 5
        b = +( a, 2 )
        c = +( a, b )
    in
        c

... and it would evaluate to 12.

Make a new grammatical element for 'let*' (Let's call it <letIncr>),
but use the same LetDecls component. Write an addSequentially method in
the LetDecls class that gets called by LetIncr nodes and implements the
needed behavior. Here is the method signature:

            public Env addSequentially( Env env )

Here is its implementation idea. First you will need to define an Env
variable named nenv and initialize it to the incoming env. But instead
of making a big Bindings object you will need to iterate through the
varList and expList lists together. After each iteration of your loop,
make a new Bindings object with only one Binding in it, and make a new
Env with that Bindings object and attach it to the one you had from the
previous iteration.

The result is a chain of "tiny" single-Binding EnvNode objects.

But there is one more thing. In any 'let' expression, we would want to
disallow a variable to appear more than once on the left-hand side. Add
checks to your runtime code so that

        let*
          x = 3
          x = +( x, 4 )
        in
          x

is not permitted. In other words, make sure a RuntimeException is thrown
if this situation is found.

Copy the V3 language files from the web and make the above modifications.
Call the directory LET_INCR and the PLCC file LET_INCR.plcc. Zip the
LET_INCR directory to a file named let-incr.zip.

**************************************************************************
* The rest of the questions are answered in an edited copy of this file. *
**************************************************************************

##QUESTION 2 (18 pts):

As you know, a procedure expression (a ProcExp) evaluates at run time
to a closure (a ProcVal) that captures the environment in which the
procedure is evaluated (i.e., defined). We refer to this approach as
using static scope rules because you can see what binding a procedure
will use by looking at the (static) source code rather than tracing
execution of the program.

The other approach to dealing with variables that occur free within a
procedure body is to use bindings from where the procedure is *applied*
rather than where the procedure is *defined*. This approach means using
dynamic scope rules.

Dynamic binding is inherently dangerous, however, since it's hard to
reason about programs. You cannot know what value might be bound to a
variable that occurs free in the procedure body by examining the static
properties of the code.

Consider the macro system realized by the C preprocessor:

        #include <stdio.h>

        static int x = 3;

        #define p(t) ( t + x )

        void func1( void ) {
            int x = 30;
            printf( "%d\n", p( 5 ) );
        }

        int main( void ) {
            func1();
            printf( "%d\n", p( 5 ) );

            return 0;
        }

    a. (5) Compile this program (use gcc if possible). Show and explain the
    output. Be technically precise.

##ANSWER:

    Consider this example from our languages:

    let
      x = 3
    in
      let
        p = proc(t) +(t,x)
      in
        let
          x = 42
        in
          .p(5)

    b. (1) Using standard static scope rules, to what will this expression
           evaluate?

##ANSWER:

    c. (2) Using (non-standard) dynamic scope rules, to what will this
           expression evaluate?

##ANSWER:

    d. (10) Were we to allow dynamic scope rules for alternate procedures,
            which we will call macros, make a list of things that
            would have to be changed or added to the V5 language
            specification. The main categories should be tokens, grammar
            rules, environment/value classes, and parse tree classes.

                let m = macro(t) +(t,x)
                in .m(5)

##ANSWER:

##QUESTION 3 (4 pts):
    You may recall seeing an algorithm that shows how a 'let ... in ... '
    expression can be replaced by a procedure application. As a simple
    example,
    
        let x = 7 in *( x, x )

    can be changed to

        .proc( x ) *( x, x ) ( 7 )

    Carry out this algorithm with the following expression by writing a
    procedure application that is equivalent to the given expression. Use
    the algorithm ONLY to replace all 'let ... in ... ' expressions. Do
    not make any other changes to the given expression. Your answer
    should not have any 'let's.

    let
      x = 3
      y = 5
      z = 8
    in
      +(x,+(y,z))

##ANSWER:


##QUESTION 4 (4 pts):
    Repeat the above with the following expression. Do not compress the
    let declarations into a single environment.

    let
      x = 3
    in
      let
        y = 5
      in
        let
	  z = +( 8, x )
        in
          +(x,+(y,z))

    [Hint: work from the inside out.]

##ANSWER:


##QUESTION 5 (4 pts):
    Repeat the above with the following expression:

    .let x = 3 y = 7 in proc(t) *(t,+(x,y)) (5)

    Note: You are to replace ONLY the 'let ... in ...' part with
    a procedure application. Do NOT make any other changes to this
    expression.

##ANSWER:


##QUESTION 6 (5 pts):
    Repeat the above with the following expression:

    let
      p = proc(t) add1(t)
      q = proc(f,x) .f(x)
    in
      .q(p, 4)

    Include in your answer, as a '%...' comment, what this expression
    evaluates to.

##ANSWER:


##SUBMISSION REQUIREMENTS
-------------------------

Submit your edited copy of this text file HW05.txt and the let-incr.zip
file into the assignment 5 MyCourses dropbox.


